// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eFashionStore.Data.EF;

namespace eFashionStore.Data.Migrations
{
    [DbContext(typeof(EFashionStoreDbContext))]
    [Migration("20211128131052_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.AuthHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("AuthHistories");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkCategoryId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ImageBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FkBlogId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkBlogId");

                    b.ToTable("ImageBlogs");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ImageProduct", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FkProductId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkProductId");

                    b.ToTable("ImageProducts");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FkBrandId")
                        .HasColumnType("int");

                    b.Property<int?>("FkCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("FkSupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Guide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ImportPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Ingredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("StatusProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkBrandId");

                    b.HasIndex("FkCategoryId");

                    b.HasIndex("FkSupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ProductLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateLike")
                        .HasColumnType("datetime2");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("ProductLike");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateComment")
                        .HasColumnType("datetime2");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FkColorId")
                        .HasColumnType("int");

                    b.Property<int?>("FkProductId")
                        .HasColumnType("int");

                    b.Property<int?>("FkSizeId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkColorId");

                    b.HasIndex("FkProductId");

                    b.HasIndex("FkSizeId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkCategoryId");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.JobSeeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("JobSeekers");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FkProductId")
                        .HasColumnType("int");

                    b.Property<int?>("FkProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.HasIndex("FkProductId");

                    b.HasIndex("FkProductVariantId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.DiscountCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValueDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DiscountCodes");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Wards")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FkOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("FkProductId")
                        .HasColumnType("int");

                    b.Property<int?>("FkProductVariantId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalItem")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FkProductId");

                    b.HasIndex("FkProductVariantId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Others.CalendarToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToDo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("CalendarToDos");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Others.UserChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentChat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeChat")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.ToTable("UserChats");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Systems.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttackedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Systems.NotificationCheckout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationCheckouts");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.WareHouse.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.WareHouse.WareHouseBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FkAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FkSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FkAppUserId");

                    b.HasIndex("FkSupplierId");

                    b.ToTable("WareHouseBills");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.WareHouse.WareHouseBillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FkProductVariantId")
                        .HasColumnType("int");

                    b.Property<int?>("FkWareHouseBillId")
                        .HasColumnType("int");

                    b.Property<int>("ImportQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalItem")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FkProductVariantId");

                    b.HasIndex("FkWareHouseBillId");

                    b.ToTable("WareHouseBillDetails");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eFashionStore.Model.Models.AuthHistory", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Blog", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Color", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.Category", "Category")
                        .WithMany("Colors")
                        .HasForeignKey("FkCategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ImageBlog", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.Blog", "Blog")
                        .WithMany("ImageBlogs")
                        .HasForeignKey("FkBlogId");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ImageProduct", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.Product", "Product")
                        .WithMany("ImageProducts")
                        .HasForeignKey("FkProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Product", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("FkBrandId");

                    b.HasOne("eFashionStore.Model.Models.Catalogs.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("FkCategoryId");

                    b.HasOne("eFashionStore.Model.Models.WareHouse.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("FkSupplierId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ProductLike", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany("ProductLikes")
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ProductReview", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany("ProductReviews")
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ProductVariant", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.Color", "Color")
                        .WithMany("ProductVariants")
                        .HasForeignKey("FkColorId");

                    b.HasOne("eFashionStore.Model.Models.Catalogs.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("FkProductId");

                    b.HasOne("eFashionStore.Model.Models.Catalogs.Size", "Size")
                        .WithMany("ProductVariants")
                        .HasForeignKey("FkSizeId");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Size", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.Category", "Category")
                        .WithMany("Sizes")
                        .HasForeignKey("FkCategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.JobSeeker", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.Cart", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("FkAppUserId");

                    b.HasOne("eFashionStore.Model.Models.Catalogs.Product", "Product")
                        .WithMany()
                        .HasForeignKey("FkProductId");

                    b.HasOne("eFashionStore.Model.Models.Catalogs.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("FkProductVariantId");

                    b.Navigation("AppUser");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.Order", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.OrderDetail", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.Product", "Product")
                        .WithMany()
                        .HasForeignKey("FkProductId");

                    b.HasOne("eFashionStore.Model.Models.Catalogs.ProductVariant", "ProductVariant")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FkProductVariantId");

                    b.HasOne("eFashionStore.Model.Models.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Others.CalendarToDo", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany("Calendars")
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Others.UserChat", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany("UserChats")
                        .HasForeignKey("FkAppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.WareHouse.WareHouseBill", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.AppUser", "AppUser")
                        .WithMany("PhieuNhapHangs")
                        .HasForeignKey("FkAppUserId");

                    b.HasOne("eFashionStore.Model.Models.WareHouse.Supplier", "Supplier")
                        .WithMany("WareHouseBills")
                        .HasForeignKey("FkSupplierId");

                    b.Navigation("AppUser");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.WareHouse.WareHouseBillDetail", b =>
                {
                    b.HasOne("eFashionStore.Model.Models.Catalogs.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("FkProductVariantId");

                    b.HasOne("eFashionStore.Model.Models.WareHouse.WareHouseBill", "WareHouseBill")
                        .WithMany("WareHouseBillDetails")
                        .HasForeignKey("FkWareHouseBillId");

                    b.Navigation("ProductVariant");

                    b.Navigation("WareHouseBill");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Blog", b =>
                {
                    b.Navigation("ImageBlogs");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Category", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Products");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Color", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Product", b =>
                {
                    b.Navigation("ImageProducts");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.ProductVariant", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Catalogs.Size", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.Orders.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.WareHouse.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("WareHouseBills");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.WareHouse.WareHouseBill", b =>
                {
                    b.Navigation("WareHouseBillDetails");
                });

            modelBuilder.Entity("eFashionStore.Model.Models.AppUser", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("PhieuNhapHangs");

                    b.Navigation("ProductLikes");

                    b.Navigation("ProductReviews");

                    b.Navigation("UserChats");
                });
#pragma warning restore 612, 618
        }
    }
}
